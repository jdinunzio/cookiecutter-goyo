[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.author_email}}>"]

[tool.poetry.dependencies]
python = "^3.10"
pip = "^22.0.4"

[tool.poetry.dev-dependencies]
black = "=19.10b0"
coverage = "^4.5"
flake8 = "^3.7"
flake8-assertive = "^1.3.0"
flake8-junit-report = "^2.1"
green = "^3.0"
mypy = "^0.750.0"
pylint = "^2.4"
pytest = "^5.3"
pytest-cov = "^2.8"
pytest-mock = "^1.13"
unittest-xml-reporting = "^2.5"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pylint.MASTER]
disable=missing-module-docstring,
        missing-function-docstring
# ignored-modules=logging,foo,bar,baz

# NOTE: To disable pylint in one specific line of a file, put a comment like this one:
#   # pylint: disable=invalid-name
# 
# To disable all warning in a file use:
#   # pylint: skip-file
#
# You can generate see all possible config options with:
#   $ pylint --generate-rcfile

[tool.black]
line-length = 100

[tool.coverage.run]
source =
    ./src/
omit =
    # omit anything in the tests directory
    ./tests/*

[tool.coverage.report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain if tests don't hit abstract methods:
    raise NotImplementedError

[tool.pydocstyle]
ignore = D100, D105, D106, D107, D203, D211, D213, D400, D405, D406, D407, D413
match = (?!test_)(?!__init__).*\.py
match-dir=^(?!(tests|migrations)).*[pydocstyle]
#inherit = false

# NOTE: From http://www.pydocstyle.org/en/stable/usage.html#in-file-configuration
#
# pydocstyle supports inline commenting to skip specific checks on specific functions
# or methods. The supported comments that can be added are:
#
#    "# noqa" skips all checks.
#    "# noqa: D102,D203" can be used to skip specific checks. Note that this is compatible
#             with skips from flake8, e.g. # noqa: D102,E501,D203.
#
# For example, this will skip the check for a period at the end of a function docstring:
#
#    def bad_function():  # noqa: D400
#        """Omit a period in the docstring as an exception"""
#        pass


[tool.mypy]
python_version = 3.10
# warn_return_any = True
warn_unused_configs = True


# [tool.mypy-mycode.foo.*]
# disallow_untyped_defs = True
#
# [tool.mypy-mycode.bar]
# warn_return_any = False
#
# [tool.mypy-somelibrary]
# ignore_missing_imports = True


# Alternatively, you can silence errors in specific lines
# adding a comment like this one:
#
#    # type: ignore
#
# or in whole files adding this comment at the top:
#
#    # mypy: ignore-errors

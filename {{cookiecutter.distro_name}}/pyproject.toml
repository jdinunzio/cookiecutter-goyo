[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.author_email}}>"]


[tool.poetry.dependencies]
python = "^3.12.2"
pip = "^24.0"
starlette = "^0.37"  # for its config and .env features
python-json-logger = "^2.0.7"
{%- if cookiecutter.use_clean_architecture %}
  {%- if cookiecutter.add_fastapi_application %}
fastapi = "^0.111"
uvicorn = "^0.29"
  {%- endif %}
  {%- if cookiecutter.add_repository_and_sqlalchemy  %}
psycopg2-binary = "^2.9.9"
sqlalchemy = "^2.0.30"
  {%- endif %}
  {%- if cookiecutter.add_fastapi_application  or cookiecutter.add_fastapi_application %}
pydantic = "^2.7"
pytz = "^2024.1"
  {%- endif %}
{%- endif %}


[tool.poetry.group.dev.dependencies]
black = "^24.4"
coverage = {extras = ["toml"], version = "^7.5"}
flake8 = "^7.0.0"
flake8-assertive = "^2.1.0"
flake8-junit-report = "^2.1.0"
green = "^4.0.2"
isort = "^5.13"
mypy = "^1.10"
pydocstyle = "^6.3"
pylint = "^3.2"
ruff = "^0.4"  # if using nix, comment this line and install nix package instead
safety = "^1.10.3"
unittest-xml-reporting = "^2.5.2"
{%- if cookiecutter.use_clean_architecture and  cookiecutter.add_fastapi_application %}
types-pytz = "^2024.1.0"
{%- endif %}


[tool.poetry.group.test.dependencies]
green = "^4.0.2"
{%- if cookiecutter.use_clean_architecture and  cookiecutter.add_fastapi_application %}
httpx = "^0.27"
{%- endif %}


[build-system]
requires = ["poetry>=1.8.2"]
build-backend = "poetry.masonry.api"


[tool.pylint.MASTER]
# NOTE: To disable pylint in one specific line of a file, put a comment like this one:
#   # pylint: disable=invalid-name
#
# To disable all warning in a file use:
#   # pylint: skip-file
#
# You can generate see all possible config options with:
#   $ pylint --generate-rcfile
disable = [
    "missing-module-docstring",
    "missing-function-docstring",
]
# ignored-modules=logging,foo,bar,baz


[tool.black]
line-length = 100


[tool.isort]
profile = "black"


[tool.coverage.run]
source = [
    "./src/",
]
omit = [
    # omit anything in the tests directory
    "./tests/*",
]


[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain if tests don't hit abstract methods:
    "raise NotImplementedError",
]


[tool.mypy]
# Note: you can silence errors in specific lines adding a comment like this one:
#
#    # type: ignore
#
# or in whole files adding this comment at the top:
#
#    # mypy: ignore-errors
python_version = 3.12
# warn_return_any = true
warn_unused_configs = true
exclude = ".venv"

# [tool.mypy-mycode.foo.*]
# disallow_untyped_defs = true
#
# [tool.mypy-mycode.bar]
# warn_return_any = false
#
# [tool.mypy-somelibrary]
# ignore_missing_imports = true


[tool.pydocstyle]
# From http://www.pydocstyle.org/en/stable/usage.html#in-file-configuration
#
# pydocstyle supports inline commenting to skip specific checks on specific functions
# or methods. The supported comments that can be added are:
#
#    "# noqa" skips all checks.
#    "# noqa: D102,D203" can be used to skip specific checks. Note that this is compatible
#             with skips from flake8, e.g. # noqa: D102,E501,D203.
#
# For example, this will skip the check for a period at the end of a function docstring:
#
#    def bad_function():  # noqa: D400
#        """Omit a period in the docstring as an exception"""
#        pass

ignore = [
	"D100", "D105", "D106", "D107",
	"D203", "D211", "D213",
	"D400", "D405", "D406", "D407", "D413",
]
match = "(?!test_)(?!__init__).*\\.py"
match-dir = "^(?!(tests|migrations)).*[pydocstyle]"
#inherit = false


[tool.ruff]
line-length=100

[tool.ruff.lint]
select = [
    "F", "E", "W", "D", "N", "S", "ANN", "B", "PL", "RUF",
    "COM", "C4", "DTZ", "EM", "RET", "SIM", "TCH", "ARG", "PTH", "ERA"
]
ignore = [
	"D100", "D104", "D203", "D213", "D407", "D413",
	"ANN101", "ANN102", "FA102", "EM101",
	"COM812", "S101", "RET504"
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

